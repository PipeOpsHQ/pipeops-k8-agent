name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]

# Concurrency control: cancel old runs when new ones start
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read
  pages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Run linter
        if: ${{ !contains(github.event.head_commit.message, 'skip-lint') }}
        uses: golangci/golangci-lint-action@v3
        continue-on-error: true
        with:
          version: latest
          args: --timeout=5m --out-format=colored-line-number

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            gofmt -s -l .
            exit 1
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Download dependencies
        run: go mod download

      - name: Run Go Security Check
        run: |
          go vet ./...
          echo "Go security check completed"

      # Note: GitHub Advanced Security must be enabled for SARIF uploads to work
      # To enable: Go to repository Settings -> Security & analysis -> Enable GitHub Advanced Security
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Run Trivy vulnerability scanner (table format for logs)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "table"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && github.repository_owner == 'pipeopshq'
        continue-on-error: true
        with:
          sarif_file: "trivy-results.sarif"

      - name: Upload Trivy results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-scan-results
          path: trivy-results.sarif
          retention-days: 30

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, security]
    strategy:
      matrix:
        os: [linux, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary
        run: |
          mkdir -p dist
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build \
            -ldflags="-w -s -X main.version=$(git describe --tags --always --dirty) -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S') -X main.commit=$(git rev-parse --short HEAD)" \
            -a -installsuffix cgo \
            -o dist/pipeops-agent-${{ matrix.os }}-${{ matrix.arch }} \
            cmd/agent/main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pipeops-agent-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/pipeops-agent-${{ matrix.os }}-${{ matrix.arch }}

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Prepare platform tag
        id: platform
        run: |
          PLATFORM_PAIR=${{ matrix.platform }}
          PLATFORM_TAG=${PLATFORM_PAIR//\//-}
          echo "tag=${PLATFORM_TAG}" >> $GITHUB_OUTPUT

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=build-${{ steps.platform.outputs.tag }}
            type=gha,scope=build-main
          cache-to: type=gha,scope=build-${{ steps.platform.outputs.tag }},mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_TIME=${{ github.event.head_commit.timestamp }}
            COMMIT=${{ github.sha }}
          provenance: false
          sbom: false

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ steps.platform.outputs.tag }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  docker-merge:
    name: Merge and Push Multi-Arch Manifest
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'pull_request'
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

  helm-package:
    name: Package Helm Chart
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "3.14.0"

      - name: Extract version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            VERSION="0.0.0-main.$(git rev-parse --short HEAD)"
          else
            VERSION="0.0.0-${GITHUB_REF#refs/heads/}.$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Verify Helm chart exists
        run: |
          # Debug: Show current directory and file structure
          pwd
          echo "Listing current directory:"
          ls -la
          echo "Checking for helm directory:"
          ls -la helm/ || echo "helm/ directory not found"
          echo "Checking for pipeops-agent chart:"
          ls -la helm/pipeops-agent/ || echo "helm/pipeops-agent/ directory not found"

          # Verify Chart.yaml exists
          if [ ! -f "helm/pipeops-agent/Chart.yaml" ]; then
            echo "Error: Chart.yaml not found at helm/pipeops-agent/Chart.yaml"
            echo "Searching for Chart.yaml files:"
            find . -name "Chart.yaml" -type f || echo "No Chart.yaml files found"
            echo "Repository structure:"
            find . -type d | head -20
            exit 1
          fi

          echo "Chart.yaml found, showing content:"
          cat helm/pipeops-agent/Chart.yaml

      - name: Update Chart version
        run: |
          # Update version and appVersion (Linux syntax - no empty string needed after -i)
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.version }}/" helm/pipeops-agent/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${{ steps.version.outputs.version }}\"/" helm/pipeops-agent/Chart.yaml

          echo "Updated Chart.yaml:"
          cat helm/pipeops-agent/Chart.yaml

      - name: Lint Helm chart
        run: |
          helm lint helm/pipeops-agent/

      - name: Package Helm chart
        run: |
          mkdir -p helm-packages
          helm package helm/pipeops-agent/ --destination helm-packages/
          echo "Packaged files:"
          ls -la helm-packages/

      - name: Upload Helm package
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart
          path: helm-packages/*.tgz

  helm-publish:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    needs: [helm-package]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: "3.14.0"

      - name: Download Helm package
        uses: actions/download-artifact@v4
        with:
          name: helm-chart
          path: helm-packages/

      - name: Login to GitHub Container Registry
        run: |
          echo "Logging in to ${{ env.REGISTRY }}..."
          echo ${{ secrets.GITHUB_TOKEN }} | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

      - name: Push Helm chart to GitHub Container Registry
        run: |
          echo "Available Helm packages:"
          ls -la helm-packages/

          # Convert repository owner to lowercase for GHCR compatibility
          REPO_OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')

          for chart in helm-packages/*.tgz; do
            if [ -f "$chart" ]; then
              echo "Pushing chart: $chart"
              echo "Repository owner: ${{ github.repository_owner }}"
              echo "Repository owner (lowercase): $REPO_OWNER_LOWER"
              echo "Target registry: oci://${{ env.REGISTRY }}/$REPO_OWNER_LOWER/pipeops-agent"
              helm push "$chart" oci://${{ env.REGISTRY }}/$REPO_OWNER_LOWER/pipeops-agent
              echo "Successfully pushed: $chart"
            else
              echo "No chart files found in helm-packages/"
              exit 1
            fi
          done

  auto-release:
    name: Auto Release on Main
    runs-on: ubuntu-latest
    needs: [build, docker-merge, helm-package]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip-release]')
    permissions:
      contents: write
      packages: write
      actions: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Generate version
        id: version
        run: |
          # Get the latest tag or default to v0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Extract version parts
          VERSION=${LATEST_TAG#v}
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Increment patch version for auto-release
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="v$MAJOR.$MINOR.$NEW_PATCH"

          # Ensure we don't create duplicate versions by checking if tag exists
          COUNTER=0
          CANDIDATE_VERSION="$NEW_VERSION"
          while git ls-remote --tags origin | grep -q "refs/tags/$CANDIDATE_VERSION$"; do
            COUNTER=$((COUNTER + 1))
            CANDIDATE_VERSION="v$MAJOR.$MINOR.$((PATCH + COUNTER))"
            echo "Tag $NEW_VERSION already exists, trying $CANDIDATE_VERSION"
          done
          NEW_VERSION="$CANDIDATE_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Final new version: $NEW_VERSION"

      - name: Configure git for tagging
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push version tag
        env:
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          echo "Creating tag: $NEW_VERSION"

          # Remove any existing local tag
          if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
            echo "Removing existing local tag $NEW_VERSION"
            git tag -d "$NEW_VERSION"
          fi

          # Create the new tag
          git tag -a "$NEW_VERSION" -m "Auto-release $NEW_VERSION from commit ${{ github.sha }}"

          # Push the tag to origin
          git push origin "$NEW_VERSION"
          echo "Successfully created and pushed tag $NEW_VERSION"

      - name: Generate checksums
        run: |
          cd dist
          find . -type f -name "pipeops-agent-*" -exec sha256sum {} \; > checksums.txt
          # Also generate checksums for Helm charts
          find . -type f -name "*.tgz" -exec sha256sum {} \; >> checksums.txt

      - name: Set repository variables
        id: repo
        run: |
          echo "owner_lower=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Create Auto Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.new_version }}
          name: Auto Release ${{ steps.version.outputs.new_version }}
          body: |
            ## Auto Release from Main Branch

            This release was automatically created from the latest changes on the main branch.

            **Commit:** ${{ github.sha }}
            **Timestamp:** ${{ github.event.head_commit.timestamp }}
            **Commit Message:** ${{ github.event.head_commit.message }}

            ## Installation

            ### Helm Chart (Recommended for Kubernetes)
            ```bash
            helm install pipeops-agent oci://${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_lower }}/pipeops-agent \
              --version ${{ steps.version.outputs.new_version }} \
              --set agent.pipeops.token="your-pipeops-token" \
              --set agent.cluster.name="your-cluster-name"
            ```

            ### Quick Install (Binary)
            ```bash
            curl -fsSL https://raw.githubusercontent.com/pipeopshq/pipeops-k8-agent/main/scripts/install.sh | bash
            ```

            ### Docker
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.new_version }}
            ```

            ## Verification
            ```bash
            sha256sum -c checksums.txt
            ```
          files: |
            dist/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Release Creation
        run: |
          echo "✅ Auto-release ${{ steps.version.outputs.new_version }} created successfully!"
          echo "🔗 Release URL: ${{ steps.create_release.outputs.url }}"
          echo "📦 Tag: ${{ steps.version.outputs.new_version }}"
          echo "🚀 Commit: ${{ github.sha }}"

      - name: Trigger documentation update
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docs.yml',
              ref: 'main'
            });
            console.log('📚 Triggered documentation update workflow');

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, docker-merge, helm-package]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Generate checksums
        run: |
          cd dist
          find . -type f -name "pipeops-agent-*" -exec sha256sum {} \; > checksums.txt
          # Also generate checksums for Helm charts
          find . -type f -name "*.tgz" -exec sha256sum {} \; >> checksums.txt

      - name: Set repository variables
        id: repo
        run: |
          echo "owner_lower=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes

            See [CHANGELOG.md](CHANGELOG.md) for details.

            ## Installation

            ### Helm Chart (Recommended for Kubernetes)
            ```bash
            helm install pipeops-agent oci://${{ env.REGISTRY }}/${{ steps.repo.outputs.owner_lower }}/pipeops-agent \
              --version ${{ github.ref_name }} \
              --set agent.pipeops.token="your-pipeops-token" \
              --set agent.cluster.name="your-cluster-name"
            ```

            ### Quick Install (Binary)
            ```bash
            curl -fsSL https://raw.githubusercontent.com/pipeopshq/pipeops-k8-agent/main/scripts/install.sh | bash
            ```

            ### Manual Installation
            1. Download the appropriate binary for your platform
            2. Make it executable: `chmod +x pipeops-agent-*`
            3. Move to PATH: `sudo mv pipeops-agent-* /usr/local/bin/pipeops-agent`

            ### Docker
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```

            ## Verification
            All binaries and charts are signed and checksums are provided. Verify with:
            ```bash
            sha256sum -c checksums.txt
            ```
          files: |
            dist/**/*
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Trigger documentation update
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docs.yml',
              ref: 'main'
            });
            console.log('📚 Triggered documentation update workflow for release');

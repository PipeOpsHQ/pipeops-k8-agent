name: docs

on:
    push:
        branches:
            - main
        tags:
            - "v*"
    workflow_dispatch:
    workflow_run:
        workflows: ["CI/CD Pipeline"]
        types:
            - completed

permissions:
    contents: write
    pages: write
    id-token: write

concurrency:
    group: "pages"
    cancel-in-progress: false

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Needed for git tags and mike versioning

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: "3.11"

            - name: Install MkDocs and dependencies
              run: |
                  pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install mike  # For versioning support

            - name: Configure git for mike
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

            - name: Determine version and build strategy
              id: version
              run: |
                  if [[ $GITHUB_REF == refs/tags/v* ]]; then
                      # Tagged release
                      VERSION=${GITHUB_REF#refs/tags/v}
                      echo "version=$VERSION" >> $GITHUB_OUTPUT
                      echo "is_release=true" >> $GITHUB_OUTPUT
                      echo "title=Release $VERSION" >> $GITHUB_OUTPUT
                  elif [[ $GITHUB_REF == refs/heads/main ]]; then
                      # Main branch - get latest tag or use development
                      LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
                      VERSION=${LATEST_TAG#v}
                      echo "version=$VERSION" >> $GITHUB_OUTPUT
                      echo "is_release=false" >> $GITHUB_OUTPUT
                      echo "title=Latest (v$VERSION)" >> $GITHUB_OUTPUT
                  else
                      # Other branches
                      VERSION="dev-$(git rev-parse --short HEAD)"
                      echo "version=$VERSION" >> $GITHUB_OUTPUT
                      echo "is_release=false" >> $GITHUB_OUTPUT
                      echo "title=Development" >> $GITHUB_OUTPUT
                  fi
                  echo "Detected version: $VERSION"
                  echo "Is release: $(echo ${{ github.ref }} | grep -q 'refs/tags/' && echo 'true' || echo 'false')"

            - name: Update version in mkdocs.yml
              run: |
                  # Update release_version field specifically
                  if grep -q "release_version:" mkdocs.yml; then
                      sed -i "s/release_version:.*/release_version: \"${{ steps.version.outputs.version }}\"/" mkdocs.yml
                  else
                      # Add release_version under extra section
                      sed -i "/^extra:/a\  release_version: \"${{ steps.version.outputs.version }}\"" mkdocs.yml
                  fi

                  echo "Updated mkdocs.yml with version ${{ steps.version.outputs.version }}"
                  echo "=== mkdocs.yml content around extra section ==="
                  grep -A 10 "^extra:" mkdocs.yml || echo "No extra section found"

            - name: Build documentation with mike (versioned)
              if: steps.version.outputs.is_release == 'true'
              run: |
                  # Build versioned documentation for releases
                  mike deploy --push --update-aliases ${{ steps.version.outputs.version }} latest
                  mike set-default --push latest

            - name: Build documentation (standard)
              if: steps.version.outputs.is_release != 'true'
              run: |
                  # Standard build for non-release commits
                  mkdocs build --strict

            - name: Upload Pages artifact
              if: steps.version.outputs.is_release != 'true'
              uses: actions/upload-pages-artifact@v3
              with:
                  path: site

    deploy:
        needs: build
        runs-on: ubuntu-latest
        if: ${{ !startsWith(github.ref, 'refs/tags/') }} # Only deploy for non-release builds (mike handles releases)
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        steps:
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

    # Separate job for release notifications
    notify:
        needs: build
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/')
        steps:
            - name: Notify release documentation update
              run: |
                  echo "üìö Documentation has been updated for release ${GITHUB_REF#refs/tags/}"
                  echo "üåê Visit: https://pipeopshq.github.io/pipeops-k8-agent/"
                  echo "üìã Version selector available at the top of the documentation"

# PipeOps Agent Configuration
# This file contains the configuration for the PipeOps agent

# Agent configuration
agent:
  # Unique identifier for this agent (auto-generated if not specified)
  id: ""
  
  # Human-readable name for this agent
  name: "pipeops-agent"
  
  # Name of the cluster this agent manages
  cluster_name: "production-cluster"
  
  # Configure Grafana to serve from the PipeOps API subpath (disable for local port-forward usage)
  grafana_sub_path: true

  # Labels to apply to this agent
  labels:
    environment: "production"
    region: "us-east-1"
    managed-by: "pipeops"

# PipeOps control plane configuration
pipeops:
  # URL of the PipeOps API (HTTP/HTTPS endpoint)
  api_url: "https://api.pipeops.sh"
  
  # Authentication token for API access
  # Get your token from the PipeOps dashboard
  token: "your-cluster-token-here"
  
  # Connection timeout
  timeout: "30s"
  
  # Reconnection settings
  reconnect:
    enabled: true
    max_attempts: 10      # 0 for unlimited
    interval: "5s"        # Initial reconnection interval
    backoff: "5s"         # Backoff increment per failed attempt
  
  # TLS configuration
  tls:
    enabled: true
    insecure_skip_verify: false
    cert_file: ""         # Path to client certificate
    key_file: ""          # Path to client private key
    ca_file: ""           # Path to CA certificate

# Tunnel configuration (Portainer-style direct port forwarding)
# Enables on-demand reverse tunneling for direct access to cluster ports
# Note: Tunnel control is handled via WebSocket push notifications from control plane
tunnel:
  # Enable/disable tunnel functionality
  enabled: false
  
  # Inactivity timeout - tunnel closes after this period of no API requests (e.g., "5m", "10m")
  inactivity_timeout: "5m"
  
  # List of ports to forward through tunnel (Portainer-style)
  # Control plane will dynamically assign remote ports via WebSocket commands
  forwards:
    - name: "kubernetes-api"
      local_addr: "localhost:6443"    # Direct K8s API access
      remote_port: 0                   # 0 = dynamically assigned
      
    - name: "kubelet-metrics"
      local_addr: "localhost:10250"   # Kubelet metrics
      remote_port: 0
      
    - name: "agent-http"
      local_addr: "localhost:8080"    # Agent HTTP server (health checks)
      remote_port: 0

# Kubernetes configuration
kubernetes:
  # Path to kubeconfig file (leave empty for in-cluster config)
  kubeconfig: ""
  
  # Whether to use in-cluster configuration
  in_cluster: true
  
  # Default namespace for agent operations
  namespace: "pipeops-system"

  # Optional: Override the Kubernetes service token and CA bundle the control plane should use.
  # If left empty, the agent will load credentials from the mounted ServiceAccount secret.
  service_token: ""
  ca_cert_data: ""

# Logging configuration
logging:
  # Log level (debug, info, warn, error)
  level: "info"
  
  # Log format (json, text)
  format: "json"
  
  # Log output (stdout, stderr, file path)
  output: "stdout"

# Optional: Env-aware TCP gateway (Istio or Gateway API)
gateway:
  enabled: false
  release_name: pipeops-gateway
  namespace: pipeops-system

  environment:
    # managed | single-vm (auto-detected if empty)
    mode: ""
    vm_ip: ""   # Set when mode=single-vm to pin LB IP (optional)

  # Istio-based routing
  istio:
    enabled: false
    service:
      create: false
      namespace: istio-system
    gateway:
      selector:
        istio: ingressgateway
      servers: []
      # Example:
      # servers:
      #   - port:
      #       number: 6379
      #       name: tcp-redis
      #       protocol: TCP
    virtual_service:
      tcp_routes: []
      #   - name: redis
      #     port: 6379
      #     destination:
      #       host: redis.default.svc.cluster.local
      #       port: 6379
      tls_routes: []
      #   - name: app-tls
      #     port: 443
      #     sni_hosts: ["app.example.com"]
      #     destination:
      #       host: app.default.svc.cluster.local
      #       port: 443

  # Kubernetes Gateway API routing
  gateway_api:
    enabled: false
    gateway_class: istio
    listeners: []
    #  - name: tcp-redis
    #    port: 6379
    #    protocol: TCP
    tcp_routes: []
    #  - name: redis
    #    section_name: tcp-redis
    #    backend_refs:
    #      - name: redis
    #        namespace: default
    #        port: 6379
    udp_routes: []
    #  - name: dns
    #    section_name: udp-dns
    #    backend_refs:
    #      - name: coredns
    #        namespace: kube-system
    #        port: 53

# Default values for pipeops-agent
replicaCount: 1

image:
  repository: ghcr.io/pipeopshq/pipeops-k8-agent
  pullPolicy: IfNotPresent
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Namespace configuration
namespace:
  create: true
  name: "pipeops-system"

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 65532
  runAsGroup: 65532
  fsGroup: 65532

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 65532

# Service configuration
service:
  enabled: false
  type: ClusterIP
  annotations: {}
  ports:
    - name: http
      port: 8080
      targetPort: 8080
      protocol: TCP

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# PipeOps Agent Configuration
agent:
  # Agent configuration
  id: ""  # Optional: Set specific agent ID (auto-generated if not specified)
  name: "pipeops-agent"
  
  # Cluster configuration
  cluster:
    name: ""  # Set this to your cluster name
  
  # PipeOps API configuration
  pipeops:
    apiUrl: "https://api.pipeops.sh"  # HTTP API endpoint
    token: ""  # Set this to your PipeOps token
    timeout: "30s"
    reconnect:
      enabled: true
      maxAttempts: 10  # 0 for unlimited
      interval: "5s"
      backoff: "5s"
    tls:
      enabled: true
      insecureSkipVerify: false
      certFile: ""
      keyFile: ""
      caFile: ""
  
  # Tunnel configuration (Portainer-style direct port forwarding)
  tunnel:
    enabled: true
    pollInterval: "5s"
    inactivityTimeout: "5m"
    forwards:
      - name: "kubernetes-api"
        localAddr: "localhost:6443"
        remotePort: 0  # 0 = dynamically assigned
      - name: "kubelet-metrics"
        localAddr: "localhost:10250"
        remotePort: 0
      - name: "agent-http"
        localAddr: "localhost:8080"
        remotePort: 0
  
  # Kubernetes configuration
  kubernetes:
    inCluster: true
    namespace: ""  # Will default to release namespace
    # kubeconfig: ""  # Optional: path to kubeconfig file
  
  # State management configuration
  state:
    # ConfigMap name for persistent state (will be prefixed with release name)
    configMapName: "state"
    # Whether to enable persistent state across restarts
    enabled: true
  
  # Logging configuration
  logging:
    level: "info"
    format: "json"
    output: "stdout"
  
  # Labels to apply to this agent
  labels:
    environment: "production"
    managed-by: "pipeops"
  
  # Gateway configuration for TCP/UDP port exposure
  # PipeOps uses Kubernetes Gateway API with Istio controller by default
  # 
  # PREREQUISITES (install once per cluster):
  #   - Gateway API experimental CRDs: kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/experimental-install.yaml
  #   - Istio with alpha gateway API: helm install istiod istio/istiod --set pilot.env.PILOT_ENABLE_ALPHA_GATEWAY_API=true
  #   - Or use: ./scripts/install-gateway-api.sh
  #
  # See docs/advanced/gateway-api-setup.md for detailed setup instructions
  gateway:
    enabled: false  # Set to true to enable TCP/UDP routing
    # Environment mode: managed (cloud LoadBalancer) or single-vm (K3s/single node)
    environment:
      mode: managed  # managed | single-vm
      vmIP: ""  # Required when mode=single-vm
    
    # Istio Gateway/VirtualService configuration (Legacy - use gatewayApi instead)
    istio:
      enabled: false
      gateway:
        name: ""
        selector:
          istio: ingressgateway
        labels: {}
        annotations: {}
        servers: []
        # Example:
        # - port:
        #     number: 5000
        #     name: tcp-runner
        #     protocol: TCP
      virtualService:
        name: ""
        labels: {}
        annotations: {}
        tcpRoutes: []
        # Example:
        # - name: runner
        #   port: 5000
        #   destination:
        #     host: runner.pipeops-system.svc.cluster.local
        #     port: 5000
        tlsRoutes: []
      # Optional: Create LoadBalancer Service targeting Istio ingress
      service:
        create: false
        namespace: istio-system
        name: ""
        type: LoadBalancer
        annotations: {}
        externalTrafficPolicy: Local
        ports: []
    
    # Kubernetes Gateway API configuration (Recommended)
    gatewayApi:
      enabled: true  # Gateway API with Istio controller is the default
      gateway:
        name: ""
        gatewayClassName: istio  # Uses Istio as the Gateway controller
        labels: {}
        annotations: {}
        listeners: []
        # Example:
        # - name: tcp-runner
        #   port: 5000
        #   protocol: TCP
      tcpRoutes: []
      # Example:
      # - name: runner
      #   sectionName: tcp-runner
      #   backendRefs:
      #     - name: runner
      #       namespace: pipeops-system
      #       port: 5000
      udpRoutes: []

# Resource limits and requests
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# RBAC configuration
rbac:
  create: true
  
# Network policies
networkPolicy:
  enabled: false

# Deployment strategy
# Use Recreate to ensure only one agent instance at a time
strategy:
  type: Recreate

# Restart policy
restartPolicy: Always

# Health checks
livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 60
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /ready
    port: 8080
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

startupProbe:
  enabled: true
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 30  # Allow up to 5 minutes for startup

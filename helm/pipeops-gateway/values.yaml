# Environment awareness
environment:
  # mode: managed | single-vm
  mode: managed
  # If mode = single-vm, set the VM/node IP here to be used where applicable
  vmIP: ""

# Istio configuration
istio:
  enabled: false
  gateway:
    # Name override for the Istio Gateway resource
    name: ""
    # Selector for istio ingress gateway pods
    selector:
      istio: ingressgateway
    # Optional labels/annotations
    labels: {}
    annotations: {}
    # List of Istio servers to open on the ingress gateway
    # Each entry maps 1:1 to Istio Gateway 'servers'
    # Example covers TCP and TLS-PASSTHROUGH
    servers:
      # - name: tcp-redis
      #   port:
      #     number: 6379
      #     name: tcp-redis
      #     protocol: TCP
      # - name: tls-app
      #   port:
      #     number: 443
      #     name: tls-app
      #     protocol: TLS
      #   hosts: ["*"]
      #   tls:
      #     mode: PASSTHROUGH
      []
  virtualService:
    # Name override for the VirtualService
    name: ""
    labels: {}
    annotations: {}
    # TCP routes -> translated into VirtualService.spec.tcp
    tcpRoutes:
      # - name: redis
      #   port: 6379
      #   destination:
      #     host: redis.default.svc.cluster.local
      #     port: 6379
      []
    # TLS routes (SNI based) -> VirtualService.spec.tls
    tlsRoutes:
      # - name: app-tls
      #   port: 443
      #   sniHosts: ["app.example.com"]
      #   destination:
      #     host: app.default.svc.cluster.local
      #     port: 443
      []
  # Optionally create a dedicated LoadBalancer Service that targets the
  # istio-ingressgateway pods with the exact TCP/TLS ports you've opened.
  # This helps when you want explicit control of LB IPs (e.g., single-vm).
  service:
    create: false
    # Namespace where the istio ingress gateway is running (usually istio-system)
    namespace: istio-system
    name: ""
    type: LoadBalancer
    annotations: {}
    # If environment.mode == single-vm and vmIP is set, we will set loadBalancerIP
    # and externalIPs to vmIP to simplify access from outside.
    externalTrafficPolicy: Local
    # If empty, ports are auto-derived from istio.gateway.servers
    ports: []

# Kubernetes Gateway API configuration
gatewayApi:
  enabled: false
  # Gateway spec
  gateway:
    name: ""
    labels: {}
    annotations: {}
    gatewayClassName: istio
    # Listeners for TCP
    listeners:
      # - name: tcp-redis
      #   port: 6379
      #   protocol: TCP # or UDP
      []
  # TCPRoute definitions; each route should reference a listener via sectionName
  tcpRoutes:
    # - name: redis
    #   sectionName: tcp-redis
    #   backendRefs:
      #     - name: redis
      #       namespace: default
      #       port: 6379
    []
  # UDPRoute definitions
  udpRoutes:
    # - name: dns
    #   sectionName: udp-dns
    #   backendRefs:
    #     - name: coredns
    #       namespace: kube-system
    #       port: 53
    []
